<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_help().
 */
function ipu_map_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ipu_map':
      $link =  Link::fromTextAndUrl('ipu_map', Url::fromUri('internal:/ipu_map'));
      return t('
        <h2>IPU Map.</h2>
        <h3>Instructions</h3>
        <p>Creates a demo page for administrators at @s</p>
        ', array('@s'=> new FormattableMarkup($link->toString(), [])));
  }
}

function ipu_map_get_countries() {
  $config = \Drupal::config('ipu_map.settings');
  $vid = $config->get('vocabulary_id');
  $language_id =  \Drupal::languageManager()->getCurrentLanguage('language_content')->getId();
  $default_language_id = \Drupal::languageManager()->getDefaultLanguage()->getId();
  $vocab = \Drupal\taxonomy\Entity\Vocabulary::load($vid);

  /*$terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => $vid,
    'langcode' => $language_id, // This doesn't work for some reason
  ]);
  */
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', $vid);
  $query->condition('langcode', $language_id);
  $query->sort('name');
  $tids = $query->execute();
  $terms = \Drupal\taxonomy\Entity\Term::loadMultiple($tids);

  if ($language_id != $default_language_id) {
    foreach ($terms as &$term) {
      if ($term->hasTranslation($language_id) ) {
        $term = $term->getTranslation($language_id);
      }
    }
  }
  return $terms;
}

function ipu_map_get_country_page() {

}
function ipu_map_get_parline_data($isocode, $description, $membership_status, $principles_signatory, $human_rights_cases) {

  $parline_url = 'https://data.ipu.org/api/node.json?type=country&field_country_data=' . $isocode;
  $link = Link::fromTextAndUrl($parline_url, Url::fromUri($parline_url));
  //\Drupal::messenger()->addStatus(t('Data from Parline: @s', ['@s' => new FormattableMarkup($link->toString(), [])]));

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_URL, $parline_url);
  $result = curl_exec($ch);

  $decoded = json_decode($result);
  $element = [];
  $chamber_nids = [];
  $element['#parliamentary_name'] = array();
  if (sizeof($decoded->list) == 0) {
    \Drupal::messenger()->addStatus(t('No data from Parline: @s', ['@s' => new FormattableMarkup($link->toString(), [])]));
  }
  foreach ($decoded->list as $chamber) {
    // TODO Multilingual
    // TODO Add fields from https://data.ipu.org/node/53/basic-information/contact-details?chamber_id=13379
    if ($chamber->language == 'en') {
      // print '<pre>'.print_r($chamber,TRUE).'</pre>';

      $element['#url'] = $chamber->url;
      // Some fields are common across languages...as they are non-lang specific.
      $element['#population_in_millions'] = number_format(round($chamber->field_population_in_thousands / 1000, 4), 2, '.', '');
      $element['#members_per_country'] = $chamber->members_per_country;
      // Some have multiple values and so are passed as an arrey
      $element['#structure_of_parliament'] = $chamber->field_structure_of_parliament;
      $element['#parliamentary_name'][] = ($chamber->parliamentary_name ? $chamber->parliamentary_name : 'Name of parliament not available');
      $chamber_nids[] = $chamber->nid;
    }
  }

  // Now get the data from the chamber. We only need one language version
  // of these, as they are the same figures in both.
  $element['#chambers'] = [];

  foreach ($chamber_nids as $chamber_nid) {
    $chamber_url = 'https://data.ipu.org/api/node.json?type=chamber&field_country=' . $chamber_nid;
    curl_setopt($ch, CURLOPT_URL, $chamber_url);
    $result = curl_exec($ch);
    $decoded = json_decode($result);
    $link = Link::fromTextAndUrl($parline_url, Url::fromUri($chamber_url));
    //\Drupal::messenger()->addStatus(t('Secondary Data from Parline: @s', ['@s' => new FormattableMarkup($link->toString(), [])]));
    $link = Link::fromTextAndUrl($parline_url, Url::fromUri($parline_url));


    
    foreach ($decoded->list as $chamber) {

      // TODO: Forbidden, cannot use
      /* $gen_sec_id = $chamber->field_general_secretary->id;
      e.g. 3162.
      $gen_sec_url = 'https://data.ipu.org/api/field_collection_item.json?item_id=' . $gen_sec_id;
      curl_setopt($ch, CURLOPT_URL, $gen_sec_url);
      */

      $element['#chambers'][] = array(
        'current_women_percent' =>$chamber->current_women_percent,
        'total_younger_45_percentage' => $chamber->total_younger_45_percentage,
        'struct_parl_status' => $chamber->field_struct_parl_status->id,
        'parliament_house' => (($chamber->field_struct_parl_status->id == 17) ? t('Upper') : t('Lower'))
      );
    };
  }
  curl_close($ch);

  $element['#membership_status'] = ($membership_status ? t('IPU member') : t('Non-IPU member'));
  $element['#principles_signatory'] = ($principles_signatory ? t('Principles signatory') : t('Not a signatory'));
  $element['#human_rights_cases'] = ($human_rights_cases ? $human_rights_cases : 0);
  $element['#description'] = $description;

  $element['#parliamentary_name'] = array_unique($element['#parliamentary_name']);
  $element['#theme'] = 'ipu-map-parline-data';

  return $element;
}

function ipu_map_get_country_news($country_term_id) {
  // Uses an in-built view. We use the pre_reneder below to change the sort order here.
  return views_embed_view('articles', 'latest_4_news_pr_country', $country_term_id);
}
function ipu_map_get_country_case_studies($country_term_id) {
  // Uses an in-built view. We use the pre_reneder below to change the sort order here.
  return views_embed_view('articles', 'latest_3_case_country', $country_term_id);
}
function ipu_map_views_pre_render(\Drupal\views\ViewExecutable $view) {
  // Change the order of the news items; show the features first, if there are any, in the last 4 items.
  if ($view->id() == 'articles') {
    if ($view->current_display == 'latest_4_news_pr_country') {
      $sorted_view = [];
      foreach ($view->result as $key => $result) {
        //print_r($result->_entity->toArray());
        $type = $result->_entity->get('field_article_type')->entity->name->value;
        $type .= $result->_entity->get('created')->value;
        $sorted_view[$type] = $result;
      }

      krsort($sorted_view);
      $view->result = $sorted_view; //$update_view;
    }
    //return $view;
  }
}

function ipu_map_get_flag($isocode) {
  $flag_url = ipu_map_get_flag_url($isocode);
  $element = [];
  $element['#flag_url'] = $flag_url;
  $element['#theme'] = 'ipu-map-flag';
  return $element;
}

function ipu_map_get_data() {
  // Get list of countries as JSON or XML.
  // This comes from a view
  $url = 'data/countries.json';
  $url = 'data/countries.xml';
}

/* Get a flag image url from ISO code */
function ipu_map_get_flag_url($isocode) {
  $geonames_url = 'https://img.geonames.org/flags/x/' . trim(strtolower($isocode)) . '.gif';
  return $geonames_url;

}

function ipu_map_theme($existing, $type, $theme, $path) {
  return array(
    'ipu-map-parline-data' => array(
      'template' => 'ipu-map-parline-data',
      'path' => $path . '/templates',
      'variables' => array(
        'population_in_millions' => '',
        'parliamentary_name' => '',
        'members_per_country' => '',
        'structure_of_parliament' => '',
        'membership_status' => '',
        'human_rights_cases' => '',
        'principles_signatory' => '',
        'description' => '',
        'chambers' => '',
        'flag' => '',
        'url' => '',
      ),
    ),
    'ipu-map-flag' => array(
      'template' => 'ipu-map-flag',
      'path' => $path . '/templates',
      'variables' => array(
        'flag_url' => '',
      ),
    ),
    'ipu-map-country' => array(
      'template' => 'ipu-map-country',
      'render element' => 'build',
      'path' => $path . '/templates',
      'variables' => array(
        'content' => '',
      ),
    ),
  );
}

